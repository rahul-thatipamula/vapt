1a






#include <stdio.h>
#include <string.h>

char input[100];
int i = 0, l = 0;

int E();
int EP();
int T();
int TP();
int F();

int E() {
    if (T()) {
        if (EP())
            return 1;
    }
    return 0;
}

int EP() {
    if (input[i] == '+') {
        i++;
        if (T()) {
            if (EP())
                return 1;
        }
        return 0;
    }
    return 1;  // epsilon
}

int T() {
    if (F()) {
        if (TP())
            return 1;
    }
    return 0;
}

int TP() {
    if (input[i] == '*') {
        i++;
        if (F()) {
            if (TP())
                return 1;
        }
        return 0;
    }
    return 1;  // epsilon
}

int F() {
    if (input[i] == '(') {
        i++;
        if (E()) {
            if (input[i] == ')') {
                i++;
                return 1;
            }
        }
        return 0;
    } else if (input[i] == 'i' && input[i + 1] == 'd') {
        i += 2;
        return 1;
    }
    return 0;
}

int main() {
    printf("The RDP grammar is:\n");
    printf("E  -> T EP\n");
    printf("EP -> + T EP | ε\n");
    printf("T  -> F TP\n");
    printf("TP -> * F TP | ε\n");
    printf("F  -> (E) | id\n");

    printf("\nEnter the string to be parsed: ");
    scanf("%s", input);

    i = 0;
    l = strlen(input);

    if (E() && input[i] == '\0') {
        printf("\nString is accepted\n");
    } else {
        printf("\nString is not accepted\n");
    }

    return 0;
}



1b

#include<stdio.h>
#include<string.h>

char input[100];
int i, l;

int S();
int L();
int LP();

int main() {
    printf("\n The RDP grammar is\n");
    printf("\n S -> (L)\n S -> a\n L -> L , S\n L -> S");

    printf("\n Enter the string to be parsed: ");
    scanf("%s", input);

    i = 0;
    l = strlen(input);

    if (S()) {
        if (input[i] == '\0') {
            printf("\nString is accepted");
        } else {
            printf("\nString is not accepted");
        }
    } else {
        printf("\nString is rejected");
    }

    return 0;
}

int S() {
    if (input[i] == '(') {
        i++;
        if (L()) {
            if (input[i] == ')') {
                i++;
                return 1;
            }
        }
        return 0;
    }
    else if (input[i] == 'a') {
        i++;
        return 1;
    }
    return 0;
}

int L() {
    if (S()) {
        if (LP()) {
            return 1;
        }
        return 0;
    }
    return 0;
}

int LP() {
    if (input[i] == ',') {
        i++;
        if (S()) {
            if (LP()) {
                return 1;
            }
            return 0;
        }
        return 0;
    }
    return 1;  // epsilon
}




2 evaluate algebric expression 



%{
#include <stdio.h>
#include <stdlib.h>
int yylex(void);
int yyerror(char *s) { printf("Error\n"); return 1; }
%}

%union { double dval; }
%token <dval> NUM
%left '+' '-'
%left '*' '/'
%type <dval> expr

%%
program: expr { printf("Result: %f\n", $1); }
;

expr: expr '+' expr { $$ = $1 + $3; }
    | expr '-' expr { $$ = $1 - $3; }
    | expr '*' expr { $$ = $1 * $3; }
    | expr '/' expr { $$ = $1 / $3; }
    | '(' expr ')'  { $$ = $2; }
    | NUM
    ;
%%
int main() { return yyparse(); }

int yylex() {
    int c;
    while ((c = getchar()) == ' ' || c == '\n');
    if ((c >= '0' && c <= '9') || c == '.') {
        ungetc(c, stdin);
        scanf("%lf", &yylval.dval);
        return NUM;
    }
    return c;
}


3 top down parser


%{
#include <stdio.h>
#include <stdlib.h>

int yylex(void);
int yyerror(char *s) {
    printf("Parse error: %s\n", s);
    return 0;
}
%}

%token NUM ID PLUS TIMES LPAREN RPAREN

%%
program: expr { printf("Valid expression!\n"); }
;
expr: term expr_prime ;
expr_prime: PLUS term expr_prime | /* epsilon */ ;
term: factor term_prime ;
term_prime: TIMES factor term_prime | /* epsilon */ ;
factor: LPAREN expr RPAREN | ID | NUM ;
%%

#include <ctype.h>

int yylex() {
    int c;
    while ((c = getchar()) == ' ' || c == '\t' || c == '\n');

    if (isdigit(c)) {
        ungetc(c, stdin);
        int val;
        scanf("%d", &val);
        yylval = val;
        return NUM;
    }
    if (isalpha(c)) return ID;
    if (c == '+') return PLUS;
    if (c == '*') return TIMES;
    if (c == '(') return LPAREN;
    if (c == ')') return RPAREN;
    if (c == EOF) return 0;
    return c;
}

int main() {
    return yyparse();
}






